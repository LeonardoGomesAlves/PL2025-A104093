
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGN BEGIN BOOLEAN COLON COMMA DIVIDE DO DOT DOWNTO ELSE END END_DOT EQUAL FALSE FOR GE GT IDENTIFIER IF INTEGER LBRACKET LE LPAREN LT MINUS MOD NE NOT OF OR PLUS PROGRAM RBRACKET READLN REAL REAL_DIVIDE RPAREN SEMICOLON STRING THEN TIMES TO TRUE TYPE_INTEGER TYPE_REAL TYPE_STRING VAR WHILE WRITE WRITELNfile : PROGRAM name vars codename : IDENTIFIER SEMICOLONvars : VAR varstail\n| emptyvarstail : vardecl varstail\n| emptyvardecl : idlist COLON type SEMICOLONidlist : IDENTIFIER idlistTailidlistTail : COMMA IDENTIFIER idlistTail\n| emptytype : TYPE_INTEGER\n| TYPE_REAL\n| BOOLEAN\n| TYPE_STRING\n| ARRAY LBRACKET arraytypes RBRACKET OF typearraytypes : INTEGER\n| INTEGER DOT DOT INTEGER  \ncode : BEGIN expressions END_DOTdotless_code : BEGIN expressions ENDexpressions : statement expressions_tail\n| emptyexpressions_tail : SEMICOLON expressions\n| emptystatement : open_statement\n| closed_statementopen_statement : IF if_condition THEN code_or_statement\n| IF if_condition THEN code_or_statement ELSE open_statement\n| WHILE if_condition DO open_statement\n| FOR for_condition DO open_statement closed_statement : IDENTIFIER identifier_assign_expression  \n| WRITELN write_statement \n| WRITE write_statement \n| READLN readln_statement \n| IF if_condition THEN code_or_statement ELSE code_or_statement\n| FOR for_condition DO code_or_statement\n| WHILE if_condition DO code_or_statementidentifier_assign_expression : ASSIGN expression  \n| LBRACKET simple_expression RBRACKET ASSIGN expression\nfor_condition : expression ASSIGN expression to_expressionto_expression : TO expression\n| DOWNTO expressioncode_or_statement : dotless_code\n| closed_statementif_condition : expressionwrite_statement : LPAREN string_statement RPARENreadln_statement : LPAREN string_statement RPARENstring_statement : expression\n| expression COMMA string_statementexpression : expression OR and_expression\n| and_expressionand_expression : and_expression AND relation_expression          \n| relation_expressionrelation_expression : simple_expression expression_tail\n| NOT simple_expression expression_tailexpression_tail : LT simple_expression \n| GT simple_expression \n| LE simple_expression \n| GE simple_expression \n| NE simple_expression \n| EQUAL simple_expression\n| emptysimple_expression : term simple_expression_tailsimple_expression_tail : PLUS term simple_expression_tail\n| MINUS term simple_expression_tail\n| emptyterm : factor term_tailterm_tail : TIMES factor term_tail\n| DIVIDE factor term_tail\n| MOD factor term_tail\n| REAL_DIVIDE factor term_tail\n| emptyfactor : PLUS factor\n| MINUS factor\n| LPAREN expression RPAREN\n| INTEGER\n| REAL\n| IDENTIFIER identifier_expression\n| IDENTIFIER length_expression\n| TRUE\n| STRING\n| FALSElength_expression : LPAREN IDENTIFIER RPAREN\nidentifier_expression : LBRACKET expression RBRACKET\n                      | empty\nempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,9,33,],[0,-1,-18,]),'IDENTIFIER':([2,6,10,12,21,22,23,31,35,42,45,46,47,58,59,61,64,73,74,75,77,78,79,80,81,82,86,87,90,91,92,93,100,102,103,104,105,111,114,118,119,120,146,151,164,165,166,170,174,175,184,],[4,15,24,15,50,50,50,71,24,50,50,50,50,50,50,50,50,24,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,138,24,24,50,-7,50,24,50,50,50,24,50,50,50,24,24,24,24,]),'VAR':([3,8,],[6,-2,]),'BEGIN':([3,5,6,7,8,11,12,13,28,73,103,104,111,151,170,174,175,184,],[-85,10,-85,-4,-2,-3,-85,-6,-5,118,118,118,-7,118,118,118,118,118,]),'SEMICOLON':([4,17,19,20,39,40,41,43,44,48,49,50,51,52,53,57,60,62,63,65,66,67,68,69,76,83,84,85,88,89,94,95,96,98,99,101,106,115,116,117,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,140,141,142,145,147,155,156,157,158,159,160,161,162,171,172,173,178,182,],[8,35,-24,-25,-50,-52,-85,-85,-85,-75,-76,-85,-79,-80,-81,-30,-31,-32,-33,111,-11,-12,-13,-14,-53,-61,-85,-62,-65,-66,-71,-72,-73,-77,-78,-84,-37,-26,-42,-43,-49,-51,-55,-56,-57,-58,-59,-60,-54,-85,-85,-85,-85,-85,-85,-74,-28,-36,-29,-35,-45,-46,-63,-64,-67,-68,-69,-70,-83,-82,-34,-27,-19,-38,-15,]),'END_DOT':([10,16,17,18,19,20,34,35,36,39,40,41,43,44,48,49,50,51,52,53,57,60,62,63,72,76,83,84,85,88,89,94,95,96,98,99,101,106,115,116,117,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,140,141,142,145,147,155,156,157,158,159,160,161,162,171,172,173,178,],[-85,33,-85,-21,-24,-25,-20,-85,-23,-50,-52,-85,-85,-85,-75,-76,-85,-79,-80,-81,-30,-31,-32,-33,-22,-53,-61,-85,-62,-65,-66,-71,-72,-73,-77,-78,-84,-37,-26,-42,-43,-49,-51,-55,-56,-57,-58,-59,-60,-54,-85,-85,-85,-85,-85,-85,-74,-28,-36,-29,-35,-45,-46,-63,-64,-67,-68,-69,-70,-83,-82,-34,-27,-19,-38,]),'IF':([10,35,73,103,104,118,151,170,174,175,184,],[21,21,114,21,21,21,21,114,114,114,114,]),'WHILE':([10,35,73,103,104,118,151,170,174,175,184,],[22,22,120,22,22,22,22,120,120,120,120,]),'FOR':([10,35,73,103,104,118,151,170,174,175,184,],[23,23,119,23,23,23,23,119,119,119,119,]),'WRITELN':([10,35,73,103,104,118,151,170,174,175,184,],[25,25,25,25,25,25,25,25,25,25,25,]),'WRITE':([10,35,73,103,104,118,151,170,174,175,184,],[26,26,26,26,26,26,26,26,26,26,26,]),'READLN':([10,35,73,103,104,118,151,170,174,175,184,],[27,27,27,27,27,27,27,27,27,27,27,]),'COLON':([14,15,30,32,71,113,],[29,-85,-8,-10,-85,-9,]),'COMMA':([15,39,40,41,43,44,48,49,50,51,52,53,71,76,83,84,85,88,89,94,95,96,98,99,101,109,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,155,156,157,158,159,160,161,162,],[31,-50,-52,-85,-85,-85,-75,-76,-85,-79,-80,-81,31,-53,-61,-85,-62,-65,-66,-71,-72,-73,-77,-78,-84,146,-49,-51,-55,-56,-57,-58,-59,-60,-54,-85,-85,-85,-85,-85,-85,-74,-63,-64,-67,-68,-69,-70,-83,-82,]),'END':([17,18,19,20,34,35,36,39,40,41,43,44,48,49,50,51,52,53,57,60,62,63,72,76,83,84,85,88,89,94,95,96,98,99,101,106,115,116,117,118,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,139,140,141,142,145,147,152,155,156,157,158,159,160,161,162,171,172,173,178,],[-85,-21,-24,-25,-20,-85,-23,-50,-52,-85,-85,-85,-75,-76,-85,-79,-80,-81,-30,-31,-32,-33,-22,-53,-61,-85,-62,-65,-66,-71,-72,-73,-77,-78,-84,-37,-26,-42,-43,-85,-49,-51,-55,-56,-57,-58,-59,-60,-54,-85,-85,-85,-85,-85,-85,-74,-28,-36,-29,-35,-45,-46,173,-63,-64,-67,-68,-69,-70,-83,-82,-34,-27,-19,-38,]),'NOT':([21,22,23,47,58,61,64,74,75,100,105,114,119,120,146,164,165,166,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'PLUS':([21,22,23,42,43,44,45,46,47,48,49,50,51,52,53,58,59,61,64,74,75,77,78,79,80,81,82,86,87,89,90,91,92,93,94,95,96,98,99,100,101,105,114,119,120,130,131,132,133,134,135,136,146,157,158,159,160,161,162,164,165,166,],[45,45,45,45,86,-85,45,45,45,-75,-76,-85,-79,-80,-81,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-66,45,45,45,45,-71,-72,-73,-77,-78,45,-84,45,45,45,45,86,86,-85,-85,-85,-85,-74,45,-67,-68,-69,-70,-83,-82,45,45,45,]),'MINUS':([21,22,23,42,43,44,45,46,47,48,49,50,51,52,53,58,59,61,64,74,75,77,78,79,80,81,82,86,87,89,90,91,92,93,94,95,96,98,99,100,101,105,114,119,120,130,131,132,133,134,135,136,146,157,158,159,160,161,162,164,165,166,],[46,46,46,46,87,-85,46,46,46,-75,-76,-85,-79,-80,-81,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-66,46,46,46,46,-71,-72,-73,-77,-78,46,-84,46,46,46,46,87,87,-85,-85,-85,-85,-74,46,-67,-68,-69,-70,-83,-82,46,46,46,]),'LPAREN':([21,22,23,25,26,27,42,45,46,47,50,58,59,61,64,74,75,77,78,79,80,81,82,86,87,90,91,92,93,100,105,114,119,120,146,164,165,166,],[47,47,47,61,61,64,47,47,47,47,102,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'INTEGER':([21,22,23,42,45,46,47,58,59,61,64,74,75,77,78,79,80,81,82,86,87,90,91,92,93,100,105,112,114,119,120,146,164,165,166,180,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,149,48,48,48,48,48,48,48,183,]),'REAL':([21,22,23,42,45,46,47,58,59,61,64,74,75,77,78,79,80,81,82,86,87,90,91,92,93,100,105,114,119,120,146,164,165,166,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'TRUE':([21,22,23,42,45,46,47,58,59,61,64,74,75,77,78,79,80,81,82,86,87,90,91,92,93,100,105,114,119,120,146,164,165,166,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'STRING':([21,22,23,42,45,46,47,58,59,61,64,74,75,77,78,79,80,81,82,86,87,90,91,92,93,100,105,114,119,120,146,164,165,166,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'FALSE':([21,22,23,42,45,46,47,58,59,61,64,74,75,77,78,79,80,81,82,86,87,90,91,92,93,100,105,114,119,120,146,164,165,166,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'ASSIGN':([24,39,40,41,43,44,48,49,50,51,52,53,56,76,83,84,85,88,89,94,95,96,98,99,101,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,144,155,156,157,158,159,160,161,162,],[58,-50,-52,-85,-85,-85,-75,-76,-85,-79,-80,-81,105,-53,-61,-85,-62,-65,-66,-71,-72,-73,-77,-78,-84,-49,-51,-55,-56,-57,-58,-59,-60,-54,-85,-85,-85,-85,-85,-85,-74,166,-63,-64,-67,-68,-69,-70,-83,-82,]),'LBRACKET':([24,50,70,],[59,100,112,]),'TYPE_INTEGER':([29,179,],[66,66,]),'TYPE_REAL':([29,179,],[67,67,]),'BOOLEAN':([29,179,],[68,68,]),'TYPE_STRING':([29,179,],[69,69,]),'ARRAY':([29,179,],[70,70,]),'THEN':([37,38,39,40,41,43,44,48,49,50,51,52,53,76,83,84,85,88,89,94,95,96,98,99,101,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,150,155,156,157,158,159,160,161,162,],[73,-44,-50,-52,-85,-85,-85,-75,-76,-85,-79,-80,-81,-53,-61,-85,-62,-65,-66,-71,-72,-73,-77,-78,-84,-49,-51,-55,-56,-57,-58,-59,-60,-54,-85,-85,-85,-85,-85,-85,-74,170,-63,-64,-67,-68,-69,-70,-83,-82,]),'DO':([38,39,40,41,43,44,48,49,50,51,52,53,54,55,76,83,84,85,88,89,94,95,96,98,99,101,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,153,154,155,156,157,158,159,160,161,162,163,176,177,],[-44,-50,-52,-85,-85,-85,-75,-76,-85,-79,-80,-81,103,104,-53,-61,-85,-62,-65,-66,-71,-72,-73,-77,-78,-84,-49,-51,-55,-56,-57,-58,-59,-60,-54,-85,-85,-85,-85,-85,-85,-74,174,175,-63,-64,-67,-68,-69,-70,-83,-82,-39,-40,-41,]),'OR':([38,39,40,41,43,44,48,49,50,51,52,53,56,76,83,84,85,88,89,94,95,96,97,98,99,101,106,109,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,143,155,156,157,158,159,160,161,162,176,177,178,],[74,-50,-52,-85,-85,-85,-75,-76,-85,-79,-80,-81,74,-53,-61,-85,-62,-65,-66,-71,-72,-73,74,-77,-78,-84,74,74,-49,-51,-55,-56,-57,-58,-59,-60,-54,-85,-85,-85,-85,-85,-85,-74,74,74,-63,-64,-67,-68,-69,-70,-83,-82,74,74,74,]),'RPAREN':([39,40,41,43,44,48,49,50,51,52,53,76,83,84,85,88,89,94,95,96,97,98,99,101,108,109,110,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,155,156,157,158,159,160,161,162,167,],[-50,-52,-85,-85,-85,-75,-76,-85,-79,-80,-81,-53,-61,-85,-62,-65,-66,-71,-72,-73,136,-77,-78,-84,145,-47,147,-49,-51,-55,-56,-57,-58,-59,-60,-54,-85,-85,-85,-85,-85,-85,-74,162,-63,-64,-67,-68,-69,-70,-83,-82,-48,]),'ELSE':([39,40,41,43,44,48,49,50,51,52,53,57,60,62,63,76,83,84,85,88,89,94,95,96,98,99,101,106,115,116,117,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,140,142,145,147,155,156,157,158,159,160,161,162,171,173,178,181,],[-50,-52,-85,-85,-85,-75,-76,-85,-79,-80,-81,-30,-31,-32,-33,-53,-61,-85,-62,-65,-66,-71,-72,-73,-77,-78,-84,-37,151,-42,-43,-49,-51,-55,-56,-57,-58,-59,-60,-54,-85,-85,-85,-85,-85,-85,-74,-36,-35,-45,-46,-63,-64,-67,-68,-69,-70,-83,-82,-34,-19,-38,184,]),'RBRACKET':([39,40,41,43,44,48,49,50,51,52,53,76,83,84,85,88,89,94,95,96,98,99,101,107,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,148,149,155,156,157,158,159,160,161,162,183,],[-50,-52,-85,-85,-85,-75,-76,-85,-79,-80,-81,-53,-61,-85,-62,-65,-66,-71,-72,-73,-77,-78,-84,144,-49,-51,-55,-56,-57,-58,-59,-60,-54,-85,-85,-85,-85,-85,-85,-74,161,168,-16,-63,-64,-67,-68,-69,-70,-83,-82,-17,]),'TO':([39,40,41,43,44,48,49,50,51,52,53,76,83,84,85,88,89,94,95,96,98,99,101,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,143,155,156,157,158,159,160,161,162,],[-50,-52,-85,-85,-85,-75,-76,-85,-79,-80,-81,-53,-61,-85,-62,-65,-66,-71,-72,-73,-77,-78,-84,-49,-51,-55,-56,-57,-58,-59,-60,-54,-85,-85,-85,-85,-85,-85,-74,164,-63,-64,-67,-68,-69,-70,-83,-82,]),'DOWNTO':([39,40,41,43,44,48,49,50,51,52,53,76,83,84,85,88,89,94,95,96,98,99,101,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,143,155,156,157,158,159,160,161,162,],[-50,-52,-85,-85,-85,-75,-76,-85,-79,-80,-81,-53,-61,-85,-62,-65,-66,-71,-72,-73,-77,-78,-84,-49,-51,-55,-56,-57,-58,-59,-60,-54,-85,-85,-85,-85,-85,-85,-74,165,-63,-64,-67,-68,-69,-70,-83,-82,]),'AND':([39,40,41,43,44,48,49,50,51,52,53,76,83,84,85,88,89,94,95,96,98,99,101,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,155,156,157,158,159,160,161,162,],[75,-52,-85,-85,-85,-75,-76,-85,-79,-80,-81,-53,-61,-85,-62,-65,-66,-71,-72,-73,-77,-78,-84,75,-51,-55,-56,-57,-58,-59,-60,-54,-85,-85,-85,-85,-85,-85,-74,-63,-64,-67,-68,-69,-70,-83,-82,]),'LT':([41,43,44,48,49,50,51,52,53,84,85,88,89,94,95,96,98,99,101,130,131,132,133,134,135,136,155,156,157,158,159,160,161,162,],[77,-85,-85,-75,-76,-85,-79,-80,-81,77,-62,-65,-66,-71,-72,-73,-77,-78,-84,-85,-85,-85,-85,-85,-85,-74,-63,-64,-67,-68,-69,-70,-83,-82,]),'GT':([41,43,44,48,49,50,51,52,53,84,85,88,89,94,95,96,98,99,101,130,131,132,133,134,135,136,155,156,157,158,159,160,161,162,],[78,-85,-85,-75,-76,-85,-79,-80,-81,78,-62,-65,-66,-71,-72,-73,-77,-78,-84,-85,-85,-85,-85,-85,-85,-74,-63,-64,-67,-68,-69,-70,-83,-82,]),'LE':([41,43,44,48,49,50,51,52,53,84,85,88,89,94,95,96,98,99,101,130,131,132,133,134,135,136,155,156,157,158,159,160,161,162,],[79,-85,-85,-75,-76,-85,-79,-80,-81,79,-62,-65,-66,-71,-72,-73,-77,-78,-84,-85,-85,-85,-85,-85,-85,-74,-63,-64,-67,-68,-69,-70,-83,-82,]),'GE':([41,43,44,48,49,50,51,52,53,84,85,88,89,94,95,96,98,99,101,130,131,132,133,134,135,136,155,156,157,158,159,160,161,162,],[80,-85,-85,-75,-76,-85,-79,-80,-81,80,-62,-65,-66,-71,-72,-73,-77,-78,-84,-85,-85,-85,-85,-85,-85,-74,-63,-64,-67,-68,-69,-70,-83,-82,]),'NE':([41,43,44,48,49,50,51,52,53,84,85,88,89,94,95,96,98,99,101,130,131,132,133,134,135,136,155,156,157,158,159,160,161,162,],[81,-85,-85,-75,-76,-85,-79,-80,-81,81,-62,-65,-66,-71,-72,-73,-77,-78,-84,-85,-85,-85,-85,-85,-85,-74,-63,-64,-67,-68,-69,-70,-83,-82,]),'EQUAL':([41,43,44,48,49,50,51,52,53,84,85,88,89,94,95,96,98,99,101,130,131,132,133,134,135,136,155,156,157,158,159,160,161,162,],[82,-85,-85,-75,-76,-85,-79,-80,-81,82,-62,-65,-66,-71,-72,-73,-77,-78,-84,-85,-85,-85,-85,-85,-85,-74,-63,-64,-67,-68,-69,-70,-83,-82,]),'TIMES':([44,48,49,50,51,52,53,95,96,98,99,101,132,133,134,135,136,161,162,],[90,-75,-76,-85,-79,-80,-81,-72,-73,-77,-78,-84,90,90,90,90,-74,-83,-82,]),'DIVIDE':([44,48,49,50,51,52,53,95,96,98,99,101,132,133,134,135,136,161,162,],[91,-75,-76,-85,-79,-80,-81,-72,-73,-77,-78,-84,91,91,91,91,-74,-83,-82,]),'MOD':([44,48,49,50,51,52,53,95,96,98,99,101,132,133,134,135,136,161,162,],[92,-75,-76,-85,-79,-80,-81,-72,-73,-77,-78,-84,92,92,92,92,-74,-83,-82,]),'REAL_DIVIDE':([44,48,49,50,51,52,53,95,96,98,99,101,132,133,134,135,136,161,162,],[93,-75,-76,-85,-79,-80,-81,-72,-73,-77,-78,-84,93,93,93,93,-74,-83,-82,]),'DOT':([149,169,],[169,180,]),'OF':([168,],[179,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file':([0,],[1,]),'name':([2,],[3,]),'vars':([3,],[5,]),'empty':([3,6,10,12,15,17,35,41,43,44,50,71,84,118,130,131,132,133,134,135,],[7,13,18,13,32,36,18,83,88,94,101,32,83,18,88,88,94,94,94,94,]),'code':([5,],[9,]),'varstail':([6,12,],[11,28,]),'vardecl':([6,12,],[12,12,]),'idlist':([6,12,],[14,14,]),'expressions':([10,35,118,],[16,72,152,]),'statement':([10,35,118,],[17,17,17,]),'open_statement':([10,35,103,104,118,151,],[19,19,139,141,19,172,]),'closed_statement':([10,35,73,103,104,118,151,170,174,175,184,],[20,20,117,117,117,20,117,117,117,117,117,]),'idlistTail':([15,71,],[30,113,]),'expressions_tail':([17,],[34,]),'if_condition':([21,22,114,120,],[37,54,150,154,]),'expression':([21,22,23,47,58,61,64,100,105,114,119,120,146,164,165,166,],[38,38,56,97,106,109,109,137,143,38,56,38,109,176,177,178,]),'and_expression':([21,22,23,47,58,61,64,74,100,105,114,119,120,146,164,165,166,],[39,39,39,39,39,39,39,121,39,39,39,39,39,39,39,39,39,]),'relation_expression':([21,22,23,47,58,61,64,74,75,100,105,114,119,120,146,164,165,166,],[40,40,40,40,40,40,40,40,122,40,40,40,40,40,40,40,40,40,]),'simple_expression':([21,22,23,42,47,58,59,61,64,74,75,77,78,79,80,81,82,100,105,114,119,120,146,164,165,166,],[41,41,41,84,41,41,107,41,41,41,41,123,124,125,126,127,128,41,41,41,41,41,41,41,41,41,]),'term':([21,22,23,42,47,58,59,61,64,74,75,77,78,79,80,81,82,86,87,100,105,114,119,120,146,164,165,166,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,130,131,43,43,43,43,43,43,43,43,43,]),'factor':([21,22,23,42,45,46,47,58,59,61,64,74,75,77,78,79,80,81,82,86,87,90,91,92,93,100,105,114,119,120,146,164,165,166,],[44,44,44,44,95,96,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,132,133,134,135,44,44,44,44,44,44,44,44,44,]),'for_condition':([23,119,],[55,153,]),'identifier_assign_expression':([24,],[57,]),'write_statement':([25,26,],[60,62,]),'readln_statement':([27,],[63,]),'type':([29,179,],[65,182,]),'expression_tail':([41,84,],[76,129,]),'simple_expression_tail':([43,130,131,],[85,155,156,]),'term_tail':([44,132,133,134,135,],[89,157,158,159,160,]),'identifier_expression':([50,],[98,]),'length_expression':([50,],[99,]),'string_statement':([61,64,146,],[108,110,167,]),'code_or_statement':([73,103,104,151,170,174,175,184,],[115,140,142,171,181,142,140,171,]),'dotless_code':([73,103,104,151,170,174,175,184,],[116,116,116,116,116,116,116,116,]),'arraytypes':([112,],[148,]),'to_expression':([143,],[163,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file","S'",1,None,None,None),
  ('file -> PROGRAM name vars code','file',4,'p_file','yacc.py',22),
  ('name -> IDENTIFIER SEMICOLON','name',2,'p_name','yacc.py',30),
  ('vars -> VAR varstail','vars',2,'p_vars','yacc.py',36),
  ('vars -> empty','vars',1,'p_vars','yacc.py',37),
  ('varstail -> vardecl varstail','varstail',2,'p_varstail','yacc.py',48),
  ('varstail -> empty','varstail',1,'p_varstail','yacc.py',49),
  ('vardecl -> idlist COLON type SEMICOLON','vardecl',4,'p_vardecl','yacc.py',61),
  ('idlist -> IDENTIFIER idlistTail','idlist',2,'p_idlist','yacc.py',105),
  ('idlistTail -> COMMA IDENTIFIER idlistTail','idlistTail',3,'p_idlistTail','yacc.py',113),
  ('idlistTail -> empty','idlistTail',1,'p_idlistTail','yacc.py',114),
  ('type -> TYPE_INTEGER','type',1,'p_type','yacc.py',125),
  ('type -> TYPE_REAL','type',1,'p_type','yacc.py',126),
  ('type -> BOOLEAN','type',1,'p_type','yacc.py',127),
  ('type -> TYPE_STRING','type',1,'p_type','yacc.py',128),
  ('type -> ARRAY LBRACKET arraytypes RBRACKET OF type','type',6,'p_type','yacc.py',129),
  ('arraytypes -> INTEGER','arraytypes',1,'p_array_types','yacc.py',136),
  ('arraytypes -> INTEGER DOT DOT INTEGER','arraytypes',4,'p_array_types','yacc.py',137),
  ('code -> BEGIN expressions END_DOT','code',3,'p_code','yacc.py',148),
  ('dotless_code -> BEGIN expressions END','dotless_code',3,'p_dotless_code','yacc.py',153),
  ('expressions -> statement expressions_tail','expressions',2,'p_expressions','yacc.py',161),
  ('expressions -> empty','expressions',1,'p_expressions','yacc.py',162),
  ('expressions_tail -> SEMICOLON expressions','expressions_tail',2,'p_expressions_tail','yacc.py',173),
  ('expressions_tail -> empty','expressions_tail',1,'p_expressions_tail','yacc.py',174),
  ('statement -> open_statement','statement',1,'p_statement','yacc.py',188),
  ('statement -> closed_statement','statement',1,'p_statement','yacc.py',189),
  ('open_statement -> IF if_condition THEN code_or_statement','open_statement',4,'p_open_statement','yacc.py',196),
  ('open_statement -> IF if_condition THEN code_or_statement ELSE open_statement','open_statement',6,'p_open_statement','yacc.py',197),
  ('open_statement -> WHILE if_condition DO open_statement','open_statement',4,'p_open_statement','yacc.py',198),
  ('open_statement -> FOR for_condition DO open_statement','open_statement',4,'p_open_statement','yacc.py',199),
  ('closed_statement -> IDENTIFIER identifier_assign_expression','closed_statement',2,'p_closed_statement','yacc.py',255),
  ('closed_statement -> WRITELN write_statement','closed_statement',2,'p_closed_statement','yacc.py',256),
  ('closed_statement -> WRITE write_statement','closed_statement',2,'p_closed_statement','yacc.py',257),
  ('closed_statement -> READLN readln_statement','closed_statement',2,'p_closed_statement','yacc.py',258),
  ('closed_statement -> IF if_condition THEN code_or_statement ELSE code_or_statement','closed_statement',6,'p_closed_statement','yacc.py',259),
  ('closed_statement -> FOR for_condition DO code_or_statement','closed_statement',4,'p_closed_statement','yacc.py',260),
  ('closed_statement -> WHILE if_condition DO code_or_statement','closed_statement',4,'p_closed_statement','yacc.py',261),
  ('identifier_assign_expression -> ASSIGN expression','identifier_assign_expression',2,'p_identifier_assign_expression','yacc.py',388),
  ('identifier_assign_expression -> LBRACKET simple_expression RBRACKET ASSIGN expression','identifier_assign_expression',5,'p_identifier_assign_expression','yacc.py',389),
  ('for_condition -> expression ASSIGN expression to_expression','for_condition',4,'p_for_condition','yacc.py',423),
  ('to_expression -> TO expression','to_expression',2,'p_to_expression','yacc.py',451),
  ('to_expression -> DOWNTO expression','to_expression',2,'p_to_expression','yacc.py',452),
  ('code_or_statement -> dotless_code','code_or_statement',1,'p_code_or_statement','yacc.py',469),
  ('code_or_statement -> closed_statement','code_or_statement',1,'p_code_or_statement','yacc.py',470),
  ('if_condition -> expression','if_condition',1,'p_if_condition','yacc.py',477),
  ('write_statement -> LPAREN string_statement RPAREN','write_statement',3,'p_write_statement','yacc.py',495),
  ('readln_statement -> LPAREN string_statement RPAREN','readln_statement',3,'p_readln_statement','yacc.py',583),
  ('string_statement -> expression','string_statement',1,'p_string_statement','yacc.py',659),
  ('string_statement -> expression COMMA string_statement','string_statement',3,'p_string_statement','yacc.py',660),
  ('expression -> expression OR and_expression','expression',3,'p_expression','yacc.py',671),
  ('expression -> and_expression','expression',1,'p_expression','yacc.py',672),
  ('and_expression -> and_expression AND relation_expression','and_expression',3,'p_and_expression','yacc.py',684),
  ('and_expression -> relation_expression','and_expression',1,'p_and_expression','yacc.py',685),
  ('relation_expression -> simple_expression expression_tail','relation_expression',2,'p_relation_expression','yacc.py',696),
  ('relation_expression -> NOT simple_expression expression_tail','relation_expression',3,'p_relation_expression','yacc.py',697),
  ('expression_tail -> LT simple_expression','expression_tail',2,'p_expression_tail','yacc.py',777),
  ('expression_tail -> GT simple_expression','expression_tail',2,'p_expression_tail','yacc.py',778),
  ('expression_tail -> LE simple_expression','expression_tail',2,'p_expression_tail','yacc.py',779),
  ('expression_tail -> GE simple_expression','expression_tail',2,'p_expression_tail','yacc.py',780),
  ('expression_tail -> NE simple_expression','expression_tail',2,'p_expression_tail','yacc.py',781),
  ('expression_tail -> EQUAL simple_expression','expression_tail',2,'p_expression_tail','yacc.py',782),
  ('expression_tail -> empty','expression_tail',1,'p_expression_tail','yacc.py',783),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','yacc.py',794),
  ('simple_expression_tail -> PLUS term simple_expression_tail','simple_expression_tail',3,'p_simple_expression_tail','yacc.py',815),
  ('simple_expression_tail -> MINUS term simple_expression_tail','simple_expression_tail',3,'p_simple_expression_tail','yacc.py',816),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','yacc.py',817),
  ('term -> factor term_tail','term',2,'p_term','yacc.py',869),
  ('term_tail -> TIMES factor term_tail','term_tail',3,'p_term_tail','yacc.py',891),
  ('term_tail -> DIVIDE factor term_tail','term_tail',3,'p_term_tail','yacc.py',892),
  ('term_tail -> MOD factor term_tail','term_tail',3,'p_term_tail','yacc.py',893),
  ('term_tail -> REAL_DIVIDE factor term_tail','term_tail',3,'p_term_tail','yacc.py',894),
  ('term_tail -> empty','term_tail',1,'p_term_tail','yacc.py',895),
  ('factor -> PLUS factor','factor',2,'p_factor','yacc.py',926),
  ('factor -> MINUS factor','factor',2,'p_factor','yacc.py',927),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','yacc.py',928),
  ('factor -> INTEGER','factor',1,'p_factor','yacc.py',929),
  ('factor -> REAL','factor',1,'p_factor','yacc.py',930),
  ('factor -> IDENTIFIER identifier_expression','factor',2,'p_factor','yacc.py',931),
  ('factor -> IDENTIFIER length_expression','factor',2,'p_factor','yacc.py',932),
  ('factor -> TRUE','factor',1,'p_factor','yacc.py',933),
  ('factor -> STRING','factor',1,'p_factor','yacc.py',934),
  ('factor -> FALSE','factor',1,'p_factor','yacc.py',935),
  ('length_expression -> LPAREN IDENTIFIER RPAREN','length_expression',3,'p_length_expression','yacc.py',1016),
  ('identifier_expression -> LBRACKET expression RBRACKET','identifier_expression',3,'p_identifier_expression','yacc.py',1047),
  ('identifier_expression -> empty','identifier_expression',1,'p_identifier_expression','yacc.py',1048),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',1077),
]
